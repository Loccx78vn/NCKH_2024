nrow = K,
ncol = P,
byrow = TRUE)
c_CA = matrix(as.integer(runif(J*P,200,300)),
nrow = J,
ncol = P,
byrow = TRUE)
c_DN = matrix(as.integer(runif(P*B,1000,2000)),
nrow = P,
ncol = B,
byrow = TRUE)
## Simulate the capacity of TKN,TKL,NM,CA:
wh = as.integer(runif(I,1000,1500)) ##warehouses
dc = as.integer(runif(J,1000,1500)) ##Distributions
mn = as.integer(runif(K,2000,5000)) ##Manufacters
pt = as.integer(runif(P,3000,5000)) ##Ports
br = as.integer(runif(B,10^4,2*10^4)) ##Brands
library(ompr)
library(ompr.roi)
library(ROI.plugin.glpk)
model <- MIPModel() %>%
# Add variables:
## Indicates the flow movement of e-waste orders:
add_variable(X_TKN[i,j],
i = 1:I,
j = 1:J) %>%
add_variable(X_TKL[j,k],
j = 1:J,
k = 1:K) %>%
add_variable(X_NM[k,p],
k = 1:K,
p = 1:P) %>%
add_variable(X_CA[j,p],
j = 1:J,
p = 1:P) %>%
add_variable(X_DN[p,b],
p = 1:P,
b = 1:B) %>%
## Indicates the penalty cost:
add_variable(UN[i],
i = 1:I) %>%
# Objective function for minimize the total cost of reverse logistics:
set_objective(
## Indicates the penalty cost:
sum_expr(pen[i]*UN[i],i = 1:I) +
## Indicates the total cost of transporting the e-watse from TKN to TKL:
sum_expr(X_TKN[i,j]*c_TKN[i,j],
i = 1:I,
j = 1:J) +
## Indicates the total cost of transporting the e-watse from TKL to NM (Manufacturer) firstly and then to CA (Port)
sum_expr(X_TKL[j,k]*c_TKL[j,k],
j = 1:J,
k = 1:K) +
sum_expr(X_NM[k,p]*c_NM[k,p],
k = 1:K,
p = 1:P)+
## Indicates the total cost of transporting the e-watse from TKL to CA (Port) and do not need to go to NM:
sum_expr(X_CA[j,p]*c_CA[j,p],
j = 1:J,
p = 1:P) +
## Indicates the total cost of transporting the e-watse from CA (Port) to HA (Brand companies):
sum_expr(X_DN[p,b]*c_DN[p,b],
p = 1:P,
b = 1:B),"min") %>%
# Add constraints of model:
## For undemand are not served:
add_constraint(UN[i] == S[i] - wh[i] - sum_expr(X_TKN[i,j],j = 1:J),
i = 1:I) %>%
add_constraint(UN[i] >= wh[i],i = 1:I) %>%
## For Xij = Xjk + Xjp
add_constraint(sum_expr(X_TKN[i,j],i = 1:I) == sum_expr(X_TKL[j,k],k = 1:K) + sum_expr(X_CA[j,p],p = 1:P),j= 1:J) %>%
## For Xjk = Xkp
add_constraint(sum_expr(X_TKL[j,k],j = 1:J) == sum_expr(X_NM[k,p],p = 1:P), k = 1:K) %>%
## For Xkp + Xjp = Xpb:
add_constraint(sum_expr(X_DN[p,b],b = 1:B) == sum_expr(X_TKL[k,p],k = 1:K) + sum_expr(X_CA[j,p],j = 1:J),p = 1:P) %>%
## For the capacity of TKN, TKL, NM, CA:
### With TKN:
add_constraint(sum_expr(X_TKN[i,j],
j = 1:J) <= wh[i],
i = 1:I) %>%
add_constraint(sum_expr(X_TKN[i,j],
i = 1:I) >= dc[j],
j = 1:J) %>%
### With TKL:
add_constraint(sum_expr(X_TKL[j,k],
j = 1:J) >= mn[k],
k = 1:K) %>%
add_constraint(sum_expr(X_TKL[j,k],k = 1:K) <= dc[j],
j = 1:J)  %>%
### With NM:
add_constraint(sum_expr(X_NM[k,p],
k = 1:K) >= pt[p],
p = 1:P) %>%
add_constraint(sum_expr(X_NM[k,p],p = 1:P) <= mn[k],
k = 1:K) %>%
### With CA:
add_constraint(sum_expr(X_CA[j,p],
j = 1:J) >= pt[p],
p = 1:P) %>%
add_constraint(sum_expr(X_CA[j,p],p = 1:P) <= dc[j],
j = 1:J) %>%
### With DN:
add_constraint(sum_expr(X_DN[p,b],
b = 1:B) <= pt[p],
p = 1:P) %>%
add_constraint(sum_expr(X_DN[p,b],p = 1:P) >= D[b],b = 1:B) %>%
### All are > 0:
add_constraint(X_TKN[i,j] >= 0, i = 1:I,j = 1:J) %>%
add_constraint(X_TKL[j,k] >= 0, k = 1:K,j = 1:J) %>%
add_constraint(X_NM[k,p] >= 0, k = 1:K,p = 1:P) %>%
add_constraint(X_CA[j,p] >= 0, j = 1:J,p = 1:P) %>%
add_constraint(X_DN[p,b] >= 0, p = 1:P,b = 1:B) %>%
#Solve the model:
solve_model(with_ROI(solver = "glpk", verbose = TRUE))
model$solution
TKN
sum(TKN$value)
sum(TKL$value)
sum(CA$value)
sum(NM$value)
sum(DN$value)
sum(S)
sum(D)
wh
sum(wh)
sum(dc)
library(ompr)
library(ompr.roi)
library(ROI.plugin.glpk)
model <- MIPModel() %>%
# Add variables:
## Indicates the flow movement of e-waste orders:
add_variable(X_TKN[i,j],
i = 1:I,
j = 1:J) %>%
add_variable(X_TKL[j,k],
j = 1:J,
k = 1:K) %>%
add_variable(X_NM[k,p],
k = 1:K,
p = 1:P) %>%
add_variable(X_CA[j,p],
j = 1:J,
p = 1:P) %>%
add_variable(X_DN[p,b],
p = 1:P,
b = 1:B) %>%
## Indicates the penalty cost:
add_variable(UN[i],
i = 1:I) %>%
# Objective function for minimize the total cost of reverse logistics:
set_objective(
## Indicates the penalty cost:
sum_expr(pen[i]*UN[i],i = 1:I) +
## Indicates the total cost of transporting the e-watse from TKN to TKL:
sum_expr(X_TKN[i,j]*c_TKN[i,j],
i = 1:I,
j = 1:J) +
## Indicates the total cost of transporting the e-watse from TKL to NM (Manufacturer) firstly and then to CA (Port)
sum_expr(X_TKL[j,k]*c_TKL[j,k],
j = 1:J,
k = 1:K) +
sum_expr(X_NM[k,p]*c_NM[k,p],
k = 1:K,
p = 1:P)+
## Indicates the total cost of transporting the e-watse from TKL to CA (Port) and do not need to go to NM:
sum_expr(X_CA[j,p]*c_CA[j,p],
j = 1:J,
p = 1:P) +
## Indicates the total cost of transporting the e-watse from CA (Port) to HA (Brand companies):
sum_expr(X_DN[p,b]*c_DN[p,b],
p = 1:P,
b = 1:B),"min") %>%
# Add constraints of model:
## For undemand are not served:
add_constraint(UN[i] == S[i] - wh[i] - sum_expr(X_TKN[i,j],j = 1:J),
i = 1:I) %>%
add_constraint(UN[i] >= wh[i],i = 1:I) %>%
## For Xij = Xjk + Xjp
add_constraint(sum_expr(X_TKN[i,j],i = 1:I) == sum_expr(X_TKL[j,k],k = 1:K) + sum_expr(X_CA[j,p],p = 1:P),j= 1:J) %>%
## For Xjk = Xkp
add_constraint(sum_expr(X_TKL[j,k],j = 1:J) == sum_expr(X_NM[k,p],p = 1:P), k = 1:K) %>%
## For Xkp + Xjp = Xpb:
add_constraint(sum_expr(X_DN[p,b],b = 1:B) == sum_expr(X_NM[k,p],k = 1:K) + sum_expr(X_CA[j,p],j = 1:J),p = 1:P) %>%
## For the capacity of TKN, TKL, NM, CA:
### With TKN:
add_constraint(sum_expr(X_TKN[i,j],
j = 1:J) <= wh[i],
i = 1:I) %>%
add_constraint(sum_expr(X_TKN[i,j],
i = 1:I) >= dc[j],
j = 1:J) %>%
### With TKL:
add_constraint(sum_expr(X_TKL[j,k],
j = 1:J) >= mn[k],
k = 1:K) %>%
add_constraint(sum_expr(X_TKL[j,k],k = 1:K) <= dc[j],
j = 1:J)  %>%
### With NM:
add_constraint(sum_expr(X_NM[k,p],
k = 1:K) >= pt[p],
p = 1:P) %>%
add_constraint(sum_expr(X_NM[k,p],p = 1:P) <= mn[k],
k = 1:K) %>%
### With CA:
add_constraint(sum_expr(X_CA[j,p],
j = 1:J) >= pt[p],
p = 1:P) %>%
add_constraint(sum_expr(X_CA[j,p],p = 1:P) <= dc[j],
j = 1:J) %>%
### With DN:
add_constraint(sum_expr(X_DN[p,b],
b = 1:B) <= pt[p],
p = 1:P) %>%
add_constraint(sum_expr(X_DN[p,b],p = 1:P) >= D[b],b = 1:B) %>%
### All are > 0:
add_constraint(X_TKN[i,j] >= 0, i = 1:I,j = 1:J) %>%
add_constraint(X_TKL[j,k] >= 0, k = 1:K,j = 1:J) %>%
add_constraint(X_NM[k,p] >= 0, k = 1:K,p = 1:P) %>%
add_constraint(X_CA[j,p] >= 0, j = 1:J,p = 1:P) %>%
add_constraint(X_DN[p,b] >= 0, p = 1:P,b = 1:B) %>%
#Solve the model:
solve_model(with_ROI(solver = "glpk", verbose = TRUE))
TKN <- get_solution(model,X_TKN[i,j]) %>% filter(value > 0)
TKL <- get_solution(model,X_TKL[j,k]) %>% filter(value > 0)
NM <- get_solution(model,X_NM[k,p]) %>% filter(value > 0)
CA <- get_solution(model,X_CA[j,p]) %>% filter(value > 0)
DN <- get_solution(model,X_DN[p,b]) %>% filter(value > 0)
nodes<-data.frame(name = c(unique(str_c(TKN$variable,TKN$i)),
unique(str_c(TKL$variable,TKL$j)),
unique(str_c(NM$variable,NM$k)),
unique(str_c(CA$variable,CA$p)),
unique(str_c(DN$variable,DN$b)))
)
links<-data.frame(
source = c(TKN$i-1,
max(TKN$i)+TKL$j-1,
max(TKN$i) + max(TKL$j) + NM$k - 1,
max(TKN$i) + CA$j - 1,
max(TKN$i) + max(TKL$j) + max(NM$k) + DN$p - 1),
target = c(max(TKN$i)+ TKN$j-1,
max(TKN$i)+ max(TKL$j) + TKL$k-1,
max(TKN$i)+ max(TKL$j) + max(NM$k) + NM$p - 1,
max(TKN$i) + max(TKL$j) + max(NM$k) + CA$p - 1,
max(TKN$i) + max(TKL$j) + max(NM$k) + max(CA$p) + DN$b - 1),
value = c(TKN$value,TKL$value,NM$value,CA$value,DN$value)
)
library(networkD3)
sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
fontSize= 12,
nodeWidth = 30)
TKN <- get_solution(model,X_TKN[i,j]) %>% filter(value > 0)
TKL <- get_solution(model,X_TKL[j,k]) %>% filter(value > 0)
NM <- get_solution(model,X_NM[k,p]) %>% filter(value > 0)
CA <- get_solution(model,X_CA[j,p]) %>% filter(value > 0)
DN <- get_solution(model,X_DN[p,b]) %>% filter(value > 0)
nodes<-data.frame(name = c(unique(str_c(TKN$variable,TKN$i)),
unique(str_c(TKL$variable,TKL$j)),
unique(str_c(NM$variable,NM$k)),
unique(str_c(CA$variable,CA$p)),
unique(str_c(DN$variable,DN$b)))
)
links<-data.frame(
source = c(TKN$i-1,
max(TKN$i)+TKL$j-1,
max(TKN$i) + max(TKL$j) + NM$k - 1,
max(TKN$i) + CA$j - 1,
max(TKN$i) + max(TKL$j) + max(NM$k) + DN$p - 1),
target = c(max(TKN$i)+ TKN$j-1,
max(TKN$i)+ max(TKL$j) + TKL$k-1,
max(TKN$i)+ max(TKL$j) + max(NM$k) + NM$p - 1,
max(TKN$i) + max(TKL$j) + max(NM$k) + CA$p - 1,
max(TKN$i) + max(TKL$j) + max(NM$k) + max(CA$p) + DN$b - 1),
value = c(TKN$value,TKL$value,NM$value,CA$value,DN$value)
)
library(networkD3)
sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
fontSize= 12,
nodeWidth = 30)
TKN
TKL
NM
CA
DC
DN
sum(TKN$value)
sum(TKL$value)
sum(NM$value)
sum(CA$value)
sum(DN$value)
links
nodes
max(TKN$i)+max(TKL$j)+max(NM$k)
max(TKN$i)+max(TKL$j)+max(NM$k) + CA$j
CA$J
CA$j
TKN <- get_solution(model,X_TKN[i,j]) %>% filter(value > 0)
TKL <- get_solution(model,X_TKL[j,k]) %>% filter(value > 0)
NM <- get_solution(model,X_NM[k,p]) %>% filter(value > 0)
CA <- get_solution(model,X_CA[j,p]) %>% filter(value > 0)
DN <- get_solution(model,X_DN[p,b]) %>% filter(value > 0)
nodes<-data.frame(name = c(unique(str_c(TKN$variable,TKN$i)),
unique(str_c(TKL$variable,TKL$j)),
unique(str_c(NM$variable,NM$k)),
unique(str_c(CA$variable,CA$p)),
unique(str_c(DN$variable,DN$b)))
)
links<-data.frame(
source = c(TKN$i-1,
max(TKN$i)+TKL$j-1,
max(TKN$i) + max(TKL$j) + NM$k - 1,
max(TKN$i) + CA$j - 1,
max(TKN$i) + max(TKL$j) + max(NM$k) + DN$p - 1),
target = c(max(TKN$i)+ TKN$j-1,
max(TKN$i)+ max(TKL$j) + TKL$k-1,
max(TKN$i)+ max(TKL$j) + max(NM$k) + NM$p - 1,
max(TKN$i) + max(TKL$j) + max(NM$k) + CA$p - 1,
max(TKN$i) + max(TKL$j) + max(NM$k) + max(CA$p) + DN$b - 1),
value = c(TKN$value,TKL$value,NM$value,CA$value,DN$value)
)
library(networkD3)
sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
fontSize= 12,
nodeWidth = 30)
nodes
CA
nodes<-data.frame(name = c(unique(str_c(TKN$variable,TKN$i)),
unique(str_c(TKL$variable,TKL$j)),
unique(str_c(NM$variable,NM$k)),
unique(str_c(CA$variable,CA$j)),
unique(str_c(DN$variable,DN$b)))
)
nodes
TKN
match(str_c(TKN$variable,TKN$i),nodes$name)
str_c(TKN$variable,TKN$i)
nodes$name
match(str_c(TKL$variable,TKL$i),nodes$name)
match(str_c(TKL$variable,TKL$j),nodes$name)
match(str_c(CA$variable,CA$j),nodes$name)
str_c(CA$variable,CA$j)
match(str_c(DN$variable,DN$p),nodes$name)
str_c(DN$variable,DN$p)
CA
str_c(NM$variable,NM$k)
NM
TKL
unique(str_c(TKL$variable,TKL$j)
)
nodes<-data.frame(name = c(unique(str_c(TKN$variable,TKN$i)),
unique(str_c(TKL$variable,TKL$j)),
unique(str_c(NM$variable,NM$k)),
unique(str_c(CA$variable,CA$p)),
unique(str_c(DN$variable,DN$b)))
)
source = c(match(str_c(TKN$variable,TKN$i),nodes$name),
match(str_c(TKL$variable,TKL$j),nodes$name),
match(str_c(NM$variable,NM$k),nodes$name),
match(str_c(CA$variable,CA$p),nodes$name),
match(str_c(DN$variable,DN$b),nodes$name))
source
DN
TKN
match(str_c(TKN$variable,TKN$j),nodes$name)
str_c(TKN$variable,TKN$j)
nodes$name
match(str_c(TKL$variable,TKN$j),nodes$name)
str_c(TKL$variable,TKN$j)
TKL$variable
rlang::last_error()
rlang::last_trace()
source = c(match(str_c(TKN$variable,TKN$i),nodes$name)-1,
match(str_c(TKL$variable,TKL$j),nodes$name)-1,
match(str_c(NM$variable,NM$k),nodes$name)-1,
match(str_c(CA$variable,CA$p),nodes$name)-1,
match(str_c(DN$variable,DN$b),nodes$name)-1)
source
value = c(TKN$value,TKL$value,NM$value,CA$value,DN$value)
value
lenght(value)
length(value)
str_c("TKL",TKL$j)
str_c("TKL",TKN$j)
TKN
match(str_c("TKL",TKN$j),nodes$name)
match(str_c("TKL",TKN$j),nodes$name)
nodes$name
match(str_c("X_TKL",TKN$j),nodes$name)
nodes
TKL
NM
ca
CA
target = c(match(str_c("X_TKL",TKN$j),nodes$name),
match(str_c("X_NM",TKL$k),nodes$name),
match(str_c("X_CA",NM$p),nodes$name),
match(str_c("X_CA",CA$p),nodes$name),
match(str_c("X_DN",CA$p),nodes$name)
)
target
str_c("X_DN",CA$p)
DN
str_c("X_CA",CA$p)
Ca
CA
DN
NM
match(str_c("X_CA",NM$p),nodes$name)
str_c("X_CA",NM$p)
nodes$name
NM
CA
unique(str_c(NM$variable,NM$P))
unique(str_c(NM$variable,NM$p)
)
c(unique(str_c(NM$variable,NM$p)),
unique(str_c(CA$variable,CA$p)))
nodes<-data.frame(name = c(unique(str_c(TKN$variable,TKN$i)),
unique(str_c(TKL$variable,TKL$j)),
unique(str_c(NM$variable,NM$k)),
unique(str_c(CA$variable,NM$p)),
unique(str_c(CA$variable,CA$p)),
unique(str_c(DN$variable,DN$b)))
)
nodes
unique(c(str_c(CA$variable,NM$p),str_c(CA$variable,CA$p))
)
nodes<-data.frame(name = c(unique(str_c(TKN$variable,TKN$i)),
unique(str_c(TKL$variable,TKL$j)),
unique(str_c(NM$variable,NM$k)),                                    unique(c(str_c(CA$variable,NM$p),                                            str_c(CA$variable,CA$p))),
unique(str_c(DN$variable,DN$b)))
)
nodes
source = c(match(str_c(TKN$variable,TKN$i),nodes$name)-1,
match(str_c(TKL$variable,TKL$j),nodes$name)-1,
match(str_c(NM$variable,NM$k),nodes$name)-1,
match(str_c(CA$variable,CA$p),nodes$name)-1,
match(str_c(DN$variable,DN$b),nodes$name)-1)
source
target = c(match(str_c("X_TKL",TKN$j),nodes$name),
match(str_c("X_NM",TKL$k),nodes$name),
match(str_c("X_CA",NM$p),nodes$name),
match(str_c("X_CA",CA$p),nodes$name),
match(str_c("X_DN",DN$b),nodes$name))
target
DN$b
TKN$j
DN
TKN
nodes
value = c(TKN$value,TKL$value,NM$value,CA$value,DN$value)
length(value)
DN
NM
match(str_c(NM$variable,NM$k),nodes$name)
match(str_c(CA$variable,CA$p),nodes$name)
CA
source = c(match(str_c("X_TKN",TKN$i),nodes$name)-1,
match(str_c("X_TKL",TKL$j),nodes$name)-1,
match(str_c("X_NM",NM$k),nodes$name)-1,
match(str_c("X_TKL",CA$j),nodes$name)-1,
match(str_c("X_CA",DN$p),nodes$name)-1)
source
TKN <- get_solution(model,X_TKN[i,j]) %>% filter(value > 0)
TKL <- get_solution(model,X_TKL[j,k]) %>% filter(value > 0)
NM <- get_solution(model,X_NM[k,p]) %>% filter(value > 0)
CA <- get_solution(model,X_CA[j,p]) %>% filter(value > 0)
DN <- get_solution(model,X_DN[p,b]) %>% filter(value > 0)
nodes<-data.frame(name = c(unique(str_c(TKN$variable,TKN$i)),
unique(str_c(TKL$variable,TKL$j)),
unique(str_c(NM$variable,NM$k)),                                    unique(c(str_c(CA$variable,NM$p),                                            str_c(CA$variable,CA$p))),
unique(str_c(DN$variable,DN$b)))
)
links<-data.frame(
source = c(match(str_c("X_TKN",TKN$i),nodes$name)-1,
match(str_c("X_TKL",TKL$j),nodes$name)-1,
match(str_c("X_NM",NM$k),nodes$name)-1,
match(str_c("X_TKL",CA$j),nodes$name)-1,
match(str_c("X_CA",DN$p),nodes$name)-1),
target = c(match(str_c("X_TKL",TKN$j),nodes$name)-1,
match(str_c("X_NM",TKL$k),nodes$name)-1,
match(str_c("X_CA",NM$p),nodes$name)-1,
match(str_c("X_CA",CA$p),nodes$name)-1,
match(str_c("X_DN",DN$b),nodes$name)-1),
value = c(TKN$value,TKL$value,NM$value,CA$value,DN$value)
)
library(networkD3)
sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
fontSize= 12,
nodeWidth = 30)
k
K
